note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class RFC_SERVER_ATTRIBUTES_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	servername:  detachable C_STRING
			-- Access member `serverName`
		require
			exists: exists
		do
			if attached c_servername (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_servername (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_servername (a_value: C_STRING) 
			-- Change the value of member `serverName` to `a_value`.
		require
			exists: exists
		do
			set_c_servername (item, a_value.item )
		end

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER) 
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	registrationcount: NATURAL
			-- Access member `registrationCount`
		require
			exists: exists
		do
			Result := c_registrationcount (item)
		ensure
			result_correct: Result = c_registrationcount (item)
		end

	set_registrationcount (a_value: NATURAL) 
			-- Change the value of member `registrationCount` to `a_value`.
		require
			exists: exists
		do
			set_c_registrationcount (item, a_value)
		ensure
			registrationcount_set: a_value = registrationcount
		end

	state: INTEGER
			-- Access member `state`
		require
			exists: exists
		do
			Result := c_state (item)
		ensure
			result_correct: Result = c_state (item)
		end

	set_state (a_value: INTEGER) 
			-- Change the value of member `state` to `a_value`.
		require
			exists: exists
		do
			set_c_state (item, a_value)
		ensure
			state_set: a_value = state
		end

	currentbusycount: NATURAL
			-- Access member `currentBusyCount`
		require
			exists: exists
		do
			Result := c_currentbusycount (item)
		ensure
			result_correct: Result = c_currentbusycount (item)
		end

	set_currentbusycount (a_value: NATURAL) 
			-- Change the value of member `currentBusyCount` to `a_value`.
		require
			exists: exists
		do
			set_c_currentbusycount (item, a_value)
		ensure
			currentbusycount_set: a_value = currentbusycount
		end

	peakbusycount: NATURAL
			-- Access member `peakBusyCount`
		require
			exists: exists
		do
			Result := c_peakbusycount (item)
		ensure
			result_correct: Result = c_peakbusycount (item)
		end

	set_peakbusycount (a_value: NATURAL) 
			-- Change the value of member `peakBusyCount` to `a_value`.
		require
			exists: exists
		do
			set_c_peakbusycount (item, a_value)
		ensure
			peakbusycount_set: a_value = peakbusycount
		end

feature {NONE} -- Implementation wrapper for struct struct _RFC_SERVER_ATTRIBUTES

	sizeof_external: INTEGER 
		external
			"C inline use <sapnwrfc.h>"
		alias
			"sizeof(struct _RFC_SERVER_ATTRIBUTES)"
		end

	c_servername (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->serverName
			]"
		end

	set_c_servername (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->serverName =  (SAP_UC*)$a_value
			]"
		ensure
			servername_set: a_value = c_servername (an_item)
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->type =  (RFC_PROTOCOL_TYPE)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_registrationcount (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->registrationCount
			]"
		end

	set_c_registrationcount (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->registrationCount =  (unsigned)$a_value
			]"
		ensure
			registrationcount_set: a_value = c_registrationcount (an_item)
		end

	c_state (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->state
			]"
		end

	set_c_state (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->state =  (RFC_SERVER_STATE)$a_value
			]"
		ensure
			state_set: a_value = c_state (an_item)
		end

	c_currentbusycount (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->currentBusyCount
			]"
		end

	set_c_currentbusycount (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->currentBusyCount =  (unsigned)$a_value
			]"
		ensure
			currentbusycount_set: a_value = c_currentbusycount (an_item)
		end

	c_peakbusycount (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->peakBusyCount
			]"
		end

	set_c_peakbusycount (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_ATTRIBUTES*)$an_item)->peakBusyCount =  (unsigned)$a_value
			]"
		ensure
			peakbusycount_set: a_value = c_peakbusycount (an_item)
		end

end
