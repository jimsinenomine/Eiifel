note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class SAPNWRFC_FUNCTIONS_API


feature -- Access

	rfc_init: INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcInit ();
			]"
		end

	rfc_get_version (majorversion: TYPED_POINTER [NATURAL]; minorversion: TYPED_POINTER [NATURAL]; patchlevel: TYPED_POINTER [NATURAL]): POINTER 
		do
			Result := c_rfc_get_version (majorversion, minorversion, patchlevel)
		ensure
			instance_free: class
		end

	rfc_get_version_internal: INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetVersionInternal ();
			]"
		end

	rfc_set_ini_path (pathname: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			pathname_c_string: C_STRING
		do
			create pathname_c_string.make (pathname)
			Result := c_rfc_set_ini_path (pathname_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_reload_ini_file (errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_reload_ini_file (errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_trace_level (connection: RFC_CONNECTION_HANDLE_STRUCT_API; destination: STRING_8; tracelevel: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			destination_c_string: C_STRING
		do
			create destination_c_string.make (destination)
			Result := c_rfc_set_trace_level (connection.item, destination_c_string.item, tracelevel, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_trace_encoding (traceencoding: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			traceencoding_c_string: C_STRING
		do
			create traceencoding_c_string.make (traceencoding)
			Result := c_rfc_set_trace_encoding (traceencoding_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_trace_dir (tracedir: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			tracedir_c_string: C_STRING
		do
			create tracedir_c_string.make (tracedir)
			Result := c_rfc_set_trace_dir (tracedir_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_trace_type (tracetype: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			tracetype_c_string: C_STRING
		do
			create tracetype_c_string.make (tracetype)
			Result := c_rfc_set_trace_type (tracetype_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_cpic_trace_level (tracelevel: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_cpic_trace_level (tracelevel, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_cpic_keepalive (timeout: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_cpic_keepalive (timeout, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_socket_trace_level (tracelevel: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_socket_trace_level (tracelevel, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_load_crypto_library (pathtolibrary: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_load_crypto_library (pathtolibrary, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_websocket_ping_interval (pinginterval: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_websocket_ping_interval (pinginterval, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_websocket_pong_timeout (pongtimeout: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_websocket_pong_timeout (pongtimeout, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_maximum_trace_file_size (size: NATURAL; unit: CHARACTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_maximum_trace_file_size (size, unit, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_maximum_stored_trace_files (numberoffiles: INTEGER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_maximum_stored_trace_files (numberoffiles, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_utf8to_sapuc (utf8: STRING_8; utf8length: NATURAL; sapuc: STRING_8; sapucsize: TYPED_POINTER [NATURAL]; resultlength: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			utf8_c_string: C_STRING
			sapuc_c_string: C_STRING
		do
			create utf8_c_string.make (utf8)
			create sapuc_c_string.make (sapuc)
			Result := c_rfc_utf8to_sapuc (utf8_c_string.item, utf8length, sapuc_c_string.item, sapucsize, resultlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_sapucto_utf8 (sapuc: STRING_8; sapuclength: NATURAL; utf8: STRING_8; utf8size: TYPED_POINTER [NATURAL]; resultlength: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			sapuc_c_string: C_STRING
			utf8_c_string: C_STRING
		do
			create sapuc_c_string.make (sapuc)
			create utf8_c_string.make (utf8)
			Result := c_rfc_sapucto_utf8 (sapuc_c_string.item, sapuclength, utf8_c_string.item, utf8size, resultlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_rc_as_string (rc: INTEGER): POINTER 
		do
			Result := c_rfc_get_rc_as_string (rc)
		ensure
			instance_free: class
		end

	rfc_get_type_as_string (type: INTEGER): POINTER 
		do
			Result := c_rfc_get_type_as_string (type)
		ensure
			instance_free: class
		end

	rfc_get_direction_as_string (direction: INTEGER): POINTER 
		do
			Result := c_rfc_get_direction_as_string (direction)
		ensure
			instance_free: class
		end

	rfc_get_server_state_as_string (serverstate: INTEGER): POINTER 
		do
			Result := c_rfc_get_server_state_as_string (serverstate)
		ensure
			instance_free: class
		end

	rfc_get_session_event_as_string (sessionevent: INTEGER): POINTER 
		do
			Result := c_rfc_get_session_event_as_string (sessionevent)
		ensure
			instance_free: class
		end

	rfc_language_iso_to_sap (laiso: STRING_8; lang: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			laiso_c_string: C_STRING
			lang_c_string: C_STRING
		do
			create laiso_c_string.make (laiso)
			create lang_c_string.make (lang)
			Result := c_rfc_language_iso_to_sap (laiso_c_string.item, lang_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_language_sap_to_iso (lang: STRING_8; laiso: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			lang_c_string: C_STRING
			laiso_c_string: C_STRING
		do
			create lang_c_string.make (lang)
			create laiso_c_string.make (laiso)
			Result := c_rfc_language_sap_to_iso (lang_c_string.item, laiso_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_saplogon_entries (saplogonidlist: POINTER; numsaplogonids: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_saplogon_entries (saplogonidlist, numsaplogonids, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_free_saplogon_entries (saplogonidlist: POINTER; numsaplogonids: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_free_saplogon_entries (saplogonidlist, numsaplogonids, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_saplogon_entry (saplogonid: STRING_8; entryparameters: RFC_CONNECTION_PARAMETER_STRUCT_API; numparameters: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			saplogonid_c_string: C_STRING
		do
			create saplogonid_c_string.make (saplogonid)
			Result := c_rfc_get_saplogon_entry (saplogonid_c_string.item, entryparameters.item, numparameters, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_free_saplogon_entry (entryparameters: RFC_CONNECTION_PARAMETER_STRUCT_API; numparameters: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_free_saplogon_entry (entryparameters.item, numparameters, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_open_connection (connectionparams: RFC_CONNECTION_PARAMETER_STRUCT_API; paramcount: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_CONNECTION_HANDLE_STRUCT_API 
		do
			if attached c_rfc_open_connection (connectionparams.item, paramcount, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_register_server (connectionparams: RFC_CONNECTION_PARAMETER_STRUCT_API; paramcount: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_CONNECTION_HANDLE_STRUCT_API 
		do
			if attached c_rfc_register_server (connectionparams.item, paramcount, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_start_server (argc: INTEGER; argv: POINTER; connectionparams: RFC_CONNECTION_PARAMETER_STRUCT_API; paramcount: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_CONNECTION_HANDLE_STRUCT_API 
		do
			if attached c_rfc_start_server (argc, argv, connectionparams.item, paramcount, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_close_connection (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_close_connection (rfchandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_is_connection_handle_valid (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; isvalid: TYPED_POINTER [INTEGER]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_is_connection_handle_valid (rfchandle.item, isvalid, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_cancel (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_cancel (rfchandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_reset_server_context (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_reset_server_context (rfchandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_ping (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_ping (rfchandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_connection_attributes (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; attr: RFC_ATTRIBUTES_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_connection_attributes (rfchandle.item, attr.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_server_context (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; context: RFC_SERVER_CONTEXT_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_server_context (rfchandle.item, context.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_sap_router (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; saprouter: STRING_8; length: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			saprouter_c_string: C_STRING
		do
			create saprouter_c_string.make (saprouter)
			Result := c_rfc_get_sap_router (rfchandle.item, saprouter_c_string.item, length, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_partner_external_ip (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; partnerexternalip: STRING_8; length: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			partnerexternalip_c_string: C_STRING
		do
			create partnerexternalip_c_string.make (partnerexternalip)
			Result := c_rfc_get_partner_external_ip (rfchandle.item, partnerexternalip_c_string.item, length, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_partner_ssoticket (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; ssoticket: STRING_8; length: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			ssoticket_c_string: C_STRING
		do
			create ssoticket_c_string.make (ssoticket)
			Result := c_rfc_get_partner_ssoticket (rfchandle.item, ssoticket_c_string.item, length, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_partner_sncname (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; sncname: STRING_8; length: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			sncname_c_string: C_STRING
		do
			create sncname_c_string.make (sncname)
			Result := c_rfc_get_partner_sncname (rfchandle.item, sncname_c_string.item, length, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_partner_snckey (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; snckey: STRING_8; length: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			snckey_c_string: C_STRING
		do
			create snckey_c_string.make (snckey)
			Result := c_rfc_get_partner_snckey (rfchandle.item, snckey_c_string.item, length, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_sncname_to_key (snclib: STRING_8; sncname: STRING_8; snckey: STRING_8; keylength: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			snclib_c_string: C_STRING
			sncname_c_string: C_STRING
			snckey_c_string: C_STRING
		do
			create snclib_c_string.make (snclib)
			create sncname_c_string.make (sncname)
			create snckey_c_string.make (snckey)
			Result := c_rfc_sncname_to_key (snclib_c_string.item, sncname_c_string.item, snckey_c_string.item, keylength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_snckey_to_name (snclib: STRING_8; snckey: STRING_8; keylength: NATURAL; sncname: STRING_8; namelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			snclib_c_string: C_STRING
			snckey_c_string: C_STRING
			sncname_c_string: C_STRING
		do
			create snclib_c_string.make (snclib)
			create snckey_c_string.make (snckey)
			create sncname_c_string.make (sncname)
			Result := c_rfc_snckey_to_name (snclib_c_string.item, snckey_c_string.item, keylength, sncname_c_string.item, namelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_listen_and_dispatch (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; timeout: INTEGER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_listen_and_dispatch (rfchandle.item, timeout, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_invoke (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; funchandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_invoke (rfchandle.item, funchandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_create_server (connectionparams: RFC_CONNECTION_PARAMETER_STRUCT_API; paramcount: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_SERVER_HANDLE_STRUCT_API 
		do
			if attached c_rfc_create_server (connectionparams.item, paramcount, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_destroy_server (serverhandle: RFC_SERVER_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_server (serverhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_launch_server (serverhandle: RFC_SERVER_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_launch_server (serverhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_shutdown_server (serverhandle: RFC_SERVER_HANDLE_STRUCT_API; timeout: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_shutdown_server (serverhandle.item, timeout, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_server_attributes (serverhandle: RFC_SERVER_HANDLE_STRUCT_API; serverattributes: RFC_SERVER_ATTRIBUTES_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_server_attributes (serverhandle.item, serverattributes.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_server_connection_monitor_data (serverhandle: RFC_SERVER_HANDLE_STRUCT_API; numberofconnections: TYPED_POINTER [NATURAL]; connectiondata: RFC_SERVER_MONITOR_DATA_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_server_connection_monitor_data (serverhandle.item, numberofconnections, connectiondata.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_destroy_server_connection_monitor_data (numberofconnections: NATURAL; connectiondata: RFC_SERVER_MONITOR_DATA_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_server_connection_monitor_data (numberofconnections, connectiondata.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_add_server_error_listener (serverhandle: RFC_SERVER_HANDLE_STRUCT_API; errorlistener: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_add_server_error_listener (serverhandle.item, errorlistener, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_add_server_state_changed_listener (serverhandle: RFC_SERVER_HANDLE_STRUCT_API; statechangelistener: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_add_server_state_changed_listener (serverhandle.item, statechangelistener, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_add_server_session_changed_listener (serverhandle: RFC_SERVER_HANDLE_STRUCT_API; sessionchangelistener: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_add_server_session_changed_listener (serverhandle.item, sessionchangelistener, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_server_stateful (connectionhandle: RFC_CONNECTION_HANDLE_STRUCT_API; isstateful: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_server_stateful (connectionhandle.item, isstateful, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_install_authentication_check_handler (onauthenticationcheck: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_install_authentication_check_handler (onauthenticationcheck, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_authentication_type (authenticationhandle: RFC_AUTHENTICATION_HANDLE_STRUCT_API; type: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_authentication_type (authenticationhandle.item, type, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_authentication_user (authenticationhandle: RFC_AUTHENTICATION_HANDLE_STRUCT_API; user: POINTER; length: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_authentication_user (authenticationhandle.item, user, length, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_authentication_password (authenticationhandle: RFC_AUTHENTICATION_HANDLE_STRUCT_API; password: POINTER; length: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_authentication_password (authenticationhandle.item, password, length, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_authentication_assertion_ticket (authenticationhandle: RFC_AUTHENTICATION_HANDLE_STRUCT_API; assertionticket: POINTER; length: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_authentication_assertion_ticket (authenticationhandle.item, assertionticket, length, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_authentication_certificate_data (authenticationhandle: RFC_AUTHENTICATION_HANDLE_STRUCT_API; certificatedata: RFC_CERTIFICATE_DATA_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_authentication_certificate_data (authenticationhandle.item, certificatedata.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_transaction_id (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; tid: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_transaction_id (rfchandle.item, tid, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_create_transaction (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; tid: POINTER; queuename: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_TRANSACTION_HANDLE_STRUCT_API 
		local
			queuename_c_string: C_STRING
		do
			create queuename_c_string.make (queuename)
			if attached c_rfc_create_transaction (rfchandle.item, tid, queuename_c_string.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_invoke_in_transaction (thandle: RFC_TRANSACTION_HANDLE_STRUCT_API; funchandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_invoke_in_transaction (thandle.item, funchandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_submit_transaction (thandle: RFC_TRANSACTION_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_submit_transaction (thandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_confirm_transaction (thandle: RFC_TRANSACTION_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_confirm_transaction (thandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_confirm_transaction_id (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; tid: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_confirm_transaction_id (rfchandle.item, tid, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_destroy_transaction (thandle: RFC_TRANSACTION_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_transaction (thandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_unit_id (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; uid: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_unit_id (rfchandle.item, uid, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_invoke_in_unit (unithandle: RFC_UNIT_HANDLE_STRUCT_API; funchandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_invoke_in_unit (unithandle.item, funchandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_submit_unit (unithandle: RFC_UNIT_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_submit_unit (unithandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_confirm_unit (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; identifier: RFC_UNIT_IDENTIFIER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_confirm_unit (rfchandle.item, identifier.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_destroy_unit (unithandle: RFC_UNIT_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_unit (unithandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_unit_state (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; identifier: RFC_UNIT_IDENTIFIER_STRUCT_API; state: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_unit_state (rfchandle.item, identifier.item, state, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_install_server_function (sysid: STRING_8; funcdeschandle: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; serverfunction: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			sysid_c_string: C_STRING
		do
			create sysid_c_string.make (sysid)
			Result := c_rfc_install_server_function (sysid_c_string.item, funcdeschandle.item, serverfunction, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_install_generic_server_function (serverfunction: POINTER; funcdescprovider: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_install_generic_server_function (serverfunction, funcdescprovider, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_install_password_change_handler (onpasswordchange: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_install_password_change_handler (onpasswordchange, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_install_authorization_check_handler (onauthorizationcheck: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_install_authorization_check_handler (onauthorizationcheck, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_create_function (funcdeschandle: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_DATA_CONTAINER_STRUCT_API 
		do
			if attached c_rfc_create_function (funcdeschandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_destroy_function (funchandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_function (funchandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_parameter_active (funchandle: RFC_DATA_CONTAINER_STRUCT_API; paramname: STRING_8; isactive: INTEGER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			paramname_c_string: C_STRING
		do
			create paramname_c_string.make (paramname)
			Result := c_rfc_set_parameter_active (funchandle.item, paramname_c_string.item, isactive, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_is_parameter_active (funchandle: RFC_DATA_CONTAINER_STRUCT_API; paramname: STRING_8; isactive: TYPED_POINTER [INTEGER]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			paramname_c_string: C_STRING
		do
			create paramname_c_string.make (paramname)
			Result := c_rfc_is_parameter_active (funchandle.item, paramname_c_string.item, isactive, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_create_structure (typedeschandle: RFC_TYPE_DESC_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_DATA_CONTAINER_STRUCT_API 
		do
			if attached c_rfc_create_structure (typedeschandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_clone_structure (srcstructurehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_DATA_CONTAINER_STRUCT_API 
		do
			if attached c_rfc_clone_structure (srcstructurehandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_destroy_structure (structhandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_structure (structhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_create_table (typedeschandle: RFC_TYPE_DESC_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_DATA_CONTAINER_STRUCT_API 
		do
			if attached c_rfc_create_table (typedeschandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_clone_table (srctablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_DATA_CONTAINER_STRUCT_API 
		do
			if attached c_rfc_clone_table (srctablehandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_destroy_table (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_table (tablehandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_current_row (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_DATA_CONTAINER_STRUCT_API 
		do
			if attached c_rfc_get_current_row (tablehandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_append_new_row (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_DATA_CONTAINER_STRUCT_API 
		do
			if attached c_rfc_append_new_row (tablehandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_reserve_capacity (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; numrows: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_reserve_capacity (tablehandle.item, numrows, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_append_new_rows (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; numrows: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_append_new_rows (tablehandle.item, numrows, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_insert_new_row (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_DATA_CONTAINER_STRUCT_API 
		do
			if attached c_rfc_insert_new_row (tablehandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_append_row (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; structhandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_append_row (tablehandle.item, structhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_insert_row (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; structhandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_insert_row (tablehandle.item, structhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_delete_current_row (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_delete_current_row (tablehandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_delete_all_rows (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_delete_all_rows (tablehandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_move_to_first_row (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_move_to_first_row (tablehandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_move_to_last_row (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_move_to_last_row (tablehandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_move_to_next_row (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_move_to_next_row (tablehandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_move_to_previous_row (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_move_to_previous_row (tablehandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_move_to (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_move_to (tablehandle.item, index, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_row_count (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; rowcount: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_row_count (tablehandle.item, rowcount, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_row_type (tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_TYPE_DESC_HANDLE_STRUCT_API 
		do
			if attached c_rfc_get_row_type (tablehandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_create_abap_object (classdeschandle: RFC_CLASS_DESC_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_DATA_CONTAINER_STRUCT_API 
		do
			if attached c_rfc_create_abap_object (classdeschandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_destroy_abap_object (objhandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_abap_object (objhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_chars (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; charbuffer: STRING_8; bufferlength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
			charbuffer_c_string: C_STRING
		do
			create name_c_string.make (name)
			create charbuffer_c_string.make (charbuffer)
			Result := c_rfc_get_chars (datahandle.item, name_c_string.item, charbuffer_c_string.item, bufferlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_chars_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; charbuffer: STRING_8; bufferlength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			charbuffer_c_string: C_STRING
		do
			create charbuffer_c_string.make (charbuffer)
			Result := c_rfc_get_chars_by_index (datahandle.item, index, charbuffer_c_string.item, bufferlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_num (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; charbuffer: STRING_8; bufferlength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
			charbuffer_c_string: C_STRING
		do
			create name_c_string.make (name)
			create charbuffer_c_string.make (charbuffer)
			Result := c_rfc_get_num (datahandle.item, name_c_string.item, charbuffer_c_string.item, bufferlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_num_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; charbuffer: STRING_8; bufferlength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			charbuffer_c_string: C_STRING
		do
			create charbuffer_c_string.make (charbuffer)
			Result := c_rfc_get_num_by_index (datahandle.item, index, charbuffer_c_string.item, bufferlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_date (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; emptydate: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_date (datahandle.item, name_c_string.item, emptydate, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_date_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; emptydate: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_date_by_index (datahandle.item, index, emptydate, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_time (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; emptytime: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_time (datahandle.item, name_c_string.item, emptytime, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_time_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; emptytime: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_time_by_index (datahandle.item, index, emptytime, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_string (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; stringbuffer: STRING_8; bufferlength: NATURAL; stringlength: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
			stringbuffer_c_string: C_STRING
		do
			create name_c_string.make (name)
			create stringbuffer_c_string.make (stringbuffer)
			Result := c_rfc_get_string (datahandle.item, name_c_string.item, stringbuffer_c_string.item, bufferlength, stringlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_string_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; stringbuffer: STRING_8; bufferlength: NATURAL; stringlength: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			stringbuffer_c_string: C_STRING
		do
			create stringbuffer_c_string.make (stringbuffer)
			Result := c_rfc_get_string_by_index (datahandle.item, index, stringbuffer_c_string.item, bufferlength, stringlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_bytes (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; bytebuffer: STRING_8; bufferlength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
			bytebuffer_c_string: C_STRING
		do
			create name_c_string.make (name)
			create bytebuffer_c_string.make (bytebuffer)
			Result := c_rfc_get_bytes (datahandle.item, name_c_string.item, bytebuffer_c_string.item, bufferlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_bytes_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; bytebuffer: STRING_8; bufferlength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			bytebuffer_c_string: C_STRING
		do
			create bytebuffer_c_string.make (bytebuffer)
			Result := c_rfc_get_bytes_by_index (datahandle.item, index, bytebuffer_c_string.item, bufferlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_xstring (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; bytebuffer: STRING_8; bufferlength: NATURAL; xstringlength: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
			bytebuffer_c_string: C_STRING
		do
			create name_c_string.make (name)
			create bytebuffer_c_string.make (bytebuffer)
			Result := c_rfc_get_xstring (datahandle.item, name_c_string.item, bytebuffer_c_string.item, bufferlength, xstringlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_xstring_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; bytebuffer: STRING_8; bufferlength: NATURAL; xstringlength: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			bytebuffer_c_string: C_STRING
		do
			create bytebuffer_c_string.make (bytebuffer)
			Result := c_rfc_get_xstring_by_index (datahandle.item, index, bytebuffer_c_string.item, bufferlength, xstringlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_int (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_int (datahandle.item, name_c_string.item, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_int_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_int_by_index (datahandle.item, index, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_int1 (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
			value_c_string: C_STRING
		do
			create name_c_string.make (name)
			create value_c_string.make (value)
			Result := c_rfc_get_int1 (datahandle.item, name_c_string.item, value_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_int1by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			value_c_string: C_STRING
		do
			create value_c_string.make (value)
			Result := c_rfc_get_int1by_index (datahandle.item, index, value_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_int2 (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_int2 (datahandle.item, name_c_string.item, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_int2by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_int2by_index (datahandle.item, index, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_int8 (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_int8 (datahandle.item, name_c_string.item, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_int8by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_int8by_index (datahandle.item, index, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_float (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_float (datahandle.item, name_c_string.item, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_float_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_float_by_index (datahandle.item, index, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_dec_f16 (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: DEC_FLOAT16_UNION_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_dec_f16 (datahandle.item, name_c_string.item, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_dec_f16by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: DEC_FLOAT16_UNION_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_dec_f16by_index (datahandle.item, index, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_dec_f34 (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: DEC_FLOAT34_UNION_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_dec_f34 (datahandle.item, name_c_string.item, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_dec_f34by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: DEC_FLOAT34_UNION_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_dec_f34by_index (datahandle.item, index, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_structure (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; structhandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_structure (datahandle.item, name_c_string.item, structhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_structure_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; structhandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_structure_by_index (datahandle.item, index, structhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_structure_into_char_buffer (datahandle: RFC_DATA_CONTAINER_STRUCT_API; charbuffer: STRING_8; bufferlength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			charbuffer_c_string: C_STRING
		do
			create charbuffer_c_string.make (charbuffer)
			Result := c_rfc_get_structure_into_char_buffer (datahandle.item, charbuffer_c_string.item, bufferlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_table (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_table (datahandle.item, name_c_string.item, tablehandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_table_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; tablehandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_table_by_index (datahandle.item, index, tablehandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_abap_object (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; objhandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_abap_object (datahandle.item, name_c_string.item, objhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_abap_object_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; objhandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_abap_object_by_index (datahandle.item, index, objhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_string_length (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; stringlength: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_string_length (datahandle.item, name_c_string.item, stringlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_string_length_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; stringlength: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_string_length_by_index (datahandle.item, index, stringlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_chars (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; charvalue: STRING_8; valuelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
			charvalue_c_string: C_STRING
		do
			create name_c_string.make (name)
			create charvalue_c_string.make (charvalue)
			Result := c_rfc_set_chars (datahandle.item, name_c_string.item, charvalue_c_string.item, valuelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_chars_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; charvalue: STRING_8; valuelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			charvalue_c_string: C_STRING
		do
			create charvalue_c_string.make (charvalue)
			Result := c_rfc_set_chars_by_index (datahandle.item, index, charvalue_c_string.item, valuelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_num (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; charvalue: STRING_8; valuelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
			charvalue_c_string: C_STRING
		do
			create name_c_string.make (name)
			create charvalue_c_string.make (charvalue)
			Result := c_rfc_set_num (datahandle.item, name_c_string.item, charvalue_c_string.item, valuelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_num_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; charvalue: STRING_8; valuelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			charvalue_c_string: C_STRING
		do
			create charvalue_c_string.make (charvalue)
			Result := c_rfc_set_num_by_index (datahandle.item, index, charvalue_c_string.item, valuelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_string (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; stringvalue: STRING_8; valuelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
			stringvalue_c_string: C_STRING
		do
			create name_c_string.make (name)
			create stringvalue_c_string.make (stringvalue)
			Result := c_rfc_set_string (datahandle.item, name_c_string.item, stringvalue_c_string.item, valuelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_string_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; stringvalue: STRING_8; valuelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			stringvalue_c_string: C_STRING
		do
			create stringvalue_c_string.make (stringvalue)
			Result := c_rfc_set_string_by_index (datahandle.item, index, stringvalue_c_string.item, valuelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_date (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; date: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_date (datahandle.item, name_c_string.item, date, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_date_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; date: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_date_by_index (datahandle.item, index, date, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_time (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; time: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_time (datahandle.item, name_c_string.item, time, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_time_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; time: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_time_by_index (datahandle.item, index, time, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_bytes (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; bytevalue: STRING_8; valuelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
			bytevalue_c_string: C_STRING
		do
			create name_c_string.make (name)
			create bytevalue_c_string.make (bytevalue)
			Result := c_rfc_set_bytes (datahandle.item, name_c_string.item, bytevalue_c_string.item, valuelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_bytes_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; bytevalue: STRING_8; valuelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			bytevalue_c_string: C_STRING
		do
			create bytevalue_c_string.make (bytevalue)
			Result := c_rfc_set_bytes_by_index (datahandle.item, index, bytevalue_c_string.item, valuelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_xstring (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; bytevalue: STRING_8; valuelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
			bytevalue_c_string: C_STRING
		do
			create name_c_string.make (name)
			create bytevalue_c_string.make (bytevalue)
			Result := c_rfc_set_xstring (datahandle.item, name_c_string.item, bytevalue_c_string.item, valuelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_xstring_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; bytevalue: STRING_8; valuelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			bytevalue_c_string: C_STRING
		do
			create bytevalue_c_string.make (bytevalue)
			Result := c_rfc_set_xstring_by_index (datahandle.item, index, bytevalue_c_string.item, valuelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_int (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: INTEGER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_int (datahandle.item, name_c_string.item, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_int_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: INTEGER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_int_by_index (datahandle.item, index, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_int1 (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_int1 (datahandle.item, name_c_string.item, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_int1by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_int1by_index (datahandle.item, index, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_int2 (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: INTEGER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_int2 (datahandle.item, name_c_string.item, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_int2by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: INTEGER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_int2by_index (datahandle.item, index, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_int8 (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: INTEGER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_int8 (datahandle.item, name_c_string.item, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_int8by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: INTEGER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_int8by_index (datahandle.item, index, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_float (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: REAL_64; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_float (datahandle.item, name_c_string.item, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_float_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: REAL_64; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_float_by_index (datahandle.item, index, value, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_dec_f16 (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: DEC_FLOAT16_UNION_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_dec_f16 (datahandle.item, name_c_string.item, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_dec_f16by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: DEC_FLOAT16_UNION_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_dec_f16by_index (datahandle.item, index, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_dec_f34 (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: DEC_FLOAT34_UNION_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_dec_f34 (datahandle.item, name_c_string.item, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_dec_f34by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: DEC_FLOAT34_UNION_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_dec_f34by_index (datahandle.item, index, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_structure (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_structure (datahandle.item, name_c_string.item, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_structure_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_structure_by_index (datahandle.item, index, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_structure_from_char_buffer (datahandle: RFC_DATA_CONTAINER_STRUCT_API; charbuffer: STRING_8; bufferlength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			charbuffer_c_string: C_STRING
		do
			create charbuffer_c_string.make (charbuffer)
			Result := c_rfc_set_structure_from_char_buffer (datahandle.item, charbuffer_c_string.item, bufferlength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_table (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_table (datahandle.item, name_c_string.item, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_table_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_table_by_index (datahandle.item, index, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_abap_object (datahandle: RFC_DATA_CONTAINER_STRUCT_API; name: STRING_8; value: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_set_abap_object (datahandle.item, name_c_string.item, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_abap_object_by_index (datahandle: RFC_DATA_CONTAINER_STRUCT_API; index: NATURAL; value: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_abap_object_by_index (datahandle.item, index, value.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_abap_class_exception (funchandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_DATA_CONTAINER_STRUCT_API 
		do
			if attached c_rfc_get_abap_class_exception (funchandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_set_abap_class_exception (funchandle: RFC_DATA_CONTAINER_STRUCT_API; excphandle: RFC_DATA_CONTAINER_STRUCT_API; exceptiontext: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			exceptiontext_c_string: C_STRING
		do
			create exceptiontext_c_string.make (exceptiontext)
			Result := c_rfc_set_abap_class_exception (funchandle.item, excphandle.item, exceptiontext_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_describe_function (funchandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_FUNCTION_DESC_HANDLE_STRUCT_API 
		do
			if attached c_rfc_describe_function (funchandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_describe_type (datahandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_TYPE_DESC_HANDLE_STRUCT_API 
		do
			if attached c_rfc_describe_type (datahandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_get_function_desc (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; funcname: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_FUNCTION_DESC_HANDLE_STRUCT_API 
		local
			funcname_c_string: C_STRING
		do
			create funcname_c_string.make (funcname)
			if attached c_rfc_get_function_desc (rfchandle.item, funcname_c_string.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_get_cached_function_desc (repositoryid: STRING_8; funcname: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_FUNCTION_DESC_HANDLE_STRUCT_API 
		local
			repositoryid_c_string: C_STRING
			funcname_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			create funcname_c_string.make (funcname)
			if attached c_rfc_get_cached_function_desc (repositoryid_c_string.item, funcname_c_string.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_add_function_desc (repositoryid: STRING_8; funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			repositoryid_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			Result := c_rfc_add_function_desc (repositoryid_c_string.item, funcdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_remove_function_desc (repositoryid: STRING_8; functionname: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			repositoryid_c_string: C_STRING
			functionname_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			create functionname_c_string.make (functionname)
			Result := c_rfc_remove_function_desc (repositoryid_c_string.item, functionname_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_type_desc (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; typename: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_TYPE_DESC_HANDLE_STRUCT_API 
		local
			typename_c_string: C_STRING
		do
			create typename_c_string.make (typename)
			if attached c_rfc_get_type_desc (rfchandle.item, typename_c_string.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_get_cached_type_desc (repositoryid: STRING_8; typename: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_TYPE_DESC_HANDLE_STRUCT_API 
		local
			repositoryid_c_string: C_STRING
			typename_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			create typename_c_string.make (typename)
			if attached c_rfc_get_cached_type_desc (repositoryid_c_string.item, typename_c_string.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_add_type_desc (repositoryid: STRING_8; typehandle: RFC_TYPE_DESC_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			repositoryid_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			Result := c_rfc_add_type_desc (repositoryid_c_string.item, typehandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_remove_type_desc (repositoryid: STRING_8; typename: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			repositoryid_c_string: C_STRING
			typename_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			create typename_c_string.make (typename)
			Result := c_rfc_remove_type_desc (repositoryid_c_string.item, typename_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_class_desc (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; classname: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_CLASS_DESC_HANDLE_STRUCT_API 
		local
			classname_c_string: C_STRING
		do
			create classname_c_string.make (classname)
			if attached c_rfc_get_class_desc (rfchandle.item, classname_c_string.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_get_cached_class_desc (repositoryid: STRING_8; classname: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_CLASS_DESC_HANDLE_STRUCT_API 
		local
			repositoryid_c_string: C_STRING
			classname_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			create classname_c_string.make (classname)
			if attached c_rfc_get_cached_class_desc (repositoryid_c_string.item, classname_c_string.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_describe_abap_object (objecthandle: RFC_DATA_CONTAINER_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_CLASS_DESC_HANDLE_STRUCT_API 
		do
			if attached c_rfc_describe_abap_object (objecthandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_add_class_desc (repositoryid: STRING_8; classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			repositoryid_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			Result := c_rfc_add_class_desc (repositoryid_c_string.item, classdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_remove_class_desc (repositoryid: STRING_8; classname: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			repositoryid_c_string: C_STRING
			classname_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			create classname_c_string.make (classname)
			Result := c_rfc_remove_class_desc (repositoryid_c_string.item, classname_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_clear_repository (repositoryid: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			repositoryid_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			Result := c_rfc_clear_repository (repositoryid_c_string.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_save_repository (repositoryid: STRING_8; targetstream: IOBUF_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			repositoryid_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			Result := c_rfc_save_repository (repositoryid_c_string.item, targetstream.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_load_repository (repositoryid: STRING_8; targetstream: IOBUF_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			repositoryid_c_string: C_STRING
		do
			create repositoryid_c_string.make (repositoryid)
			Result := c_rfc_load_repository (repositoryid_c_string.item, targetstream.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_create_type_desc (name: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_TYPE_DESC_HANDLE_STRUCT_API 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			if attached c_rfc_create_type_desc (name_c_string.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_add_type_field (typehandle: RFC_TYPE_DESC_HANDLE_STRUCT_API; fielddescr: RFC_FIELD_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_add_type_field (typehandle.item, fielddescr.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_type_length (typehandle: RFC_TYPE_DESC_HANDLE_STRUCT_API; nucbytelength: NATURAL; ucbytelength: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_type_length (typehandle.item, nucbytelength, ucbytelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_type_name (typehandle: RFC_TYPE_DESC_HANDLE_STRUCT_API; bufferforname: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_type_name (typehandle.item, bufferforname, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_field_count (typehandle: RFC_TYPE_DESC_HANDLE_STRUCT_API; count: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_field_count (typehandle.item, count, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_field_desc_by_index (typehandle: RFC_TYPE_DESC_HANDLE_STRUCT_API; index: NATURAL; fielddescr: RFC_FIELD_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_field_desc_by_index (typehandle.item, index, fielddescr.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_field_desc_by_name (typehandle: RFC_TYPE_DESC_HANDLE_STRUCT_API; name: STRING_8; fielddescr: RFC_FIELD_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_field_desc_by_name (typehandle.item, name_c_string.item, fielddescr.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_type_length (typehandle: RFC_TYPE_DESC_HANDLE_STRUCT_API; nucbytelength: TYPED_POINTER [NATURAL]; ucbytelength: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_type_length (typehandle.item, nucbytelength, ucbytelength, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_destroy_type_desc (typehandle: RFC_TYPE_DESC_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_type_desc (typehandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_create_function_desc (name: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_FUNCTION_DESC_HANDLE_STRUCT_API 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			if attached c_rfc_create_function_desc (name_c_string.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_get_function_name (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; bufferforname: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_function_name (funcdesc.item, bufferforname, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_add_parameter (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; paramdescr: RFC_PARAMETER_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_add_parameter (funcdesc.item, paramdescr.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_parameter_count (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; count: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_parameter_count (funcdesc.item, count, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_parameter_desc_by_index (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; index: NATURAL; paramdesc: RFC_PARAMETER_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_parameter_desc_by_index (funcdesc.item, index, paramdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_parameter_desc_by_name (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; name: STRING_8; paramdesc: RFC_PARAMETER_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_parameter_desc_by_name (funcdesc.item, name_c_string.item, paramdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_add_exception (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; excdesc: RFC_EXCEPTION_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_add_exception (funcdesc.item, excdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_exception_count (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; count: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_exception_count (funcdesc.item, count, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_exception_desc_by_index (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; index: NATURAL; excdesc: RFC_EXCEPTION_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_exception_desc_by_index (funcdesc.item, index, excdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_exception_desc_by_name (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; name: STRING_8; excdesc: RFC_EXCEPTION_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_exception_desc_by_name (funcdesc.item, name_c_string.item, excdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_enable_basxml (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_enable_basxml (funcdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_is_basxmlsupported (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; isenabled: TYPED_POINTER [INTEGER]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_is_basxmlsupported (funcdesc.item, isenabled, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_destroy_function_desc (funcdesc: RFC_FUNCTION_DESC_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_function_desc (funcdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_enable_abap_class_exception (funchandle: RFC_DATA_CONTAINER_STRUCT_API; rfchandlerepository: RFC_CONNECTION_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_enable_abap_class_exception (funchandle.item, rfchandlerepository.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_is_abap_class_exception_enabled (funchandle: RFC_DATA_CONTAINER_STRUCT_API; isenabled: TYPED_POINTER [INTEGER]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_is_abap_class_exception_enabled (funchandle.item, isenabled, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_create_class_desc (name: STRING_8; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_CLASS_DESC_HANDLE_STRUCT_API 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			if attached c_rfc_create_class_desc (name_c_string.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_get_class_name (classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; bufferforname: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_class_name (classdesc.item, bufferforname, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_add_class_attribute (classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; attrdesc: RFC_CLASS_ATTRIBUTE_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_add_class_attribute (classdesc.item, attrdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_class_attributes_count (classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; count: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_class_attributes_count (classdesc.item, count, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_class_attribute_desc_by_index (classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; index: NATURAL; attrdesc: RFC_CLASS_ATTRIBUTE_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_class_attribute_desc_by_index (classdesc.item, index, attrdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_class_attribute_desc_by_name (classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; name: STRING_8; attrdesc: RFC_CLASS_ATTRIBUTE_DESC_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_rfc_get_class_attribute_desc_by_name (classdesc.item, name_c_string.item, attrdesc.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_parent_class_by_index (classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; name: POINTER; index: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_parent_class_by_index (classdesc.item, name, index, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_parent_classes_count (classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; parentclassescount: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_parent_classes_count (classdesc.item, parentclassescount, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_add_parent_class (classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; name: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_add_parent_class (classdesc.item, name, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_implemented_interface_by_index (classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; index: NATURAL; name: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_implemented_interface_by_index (classdesc.item, index, name, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_implemented_interfaces_count (classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; implementedinterfacescount: TYPED_POINTER [NATURAL]; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_implemented_interfaces_count (classdesc.item, implementedinterfacescount, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_add_implemented_interface (classdesc: RFC_CLASS_DESC_HANDLE_STRUCT_API; name: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_add_implemented_interface (classdesc.item, name, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_destroy_class_desc (classhandle: RFC_CLASS_DESC_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_class_desc (classhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_create_metadata_query_result (errorinfo: RFC_ERROR_INFO_STRUCT_API): POINTER 
		do
			Result := c_rfc_create_metadata_query_result (errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_destroy_metadata_query_result (handle: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_metadata_query_result (handle, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_create_throughput (errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_THROUGHPUT_HANDLE_STRUCT_API 
		do
			if attached c_rfc_create_throughput (errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_destroy_throughput (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_destroy_throughput (throughput.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_throughput_on_connection (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_throughput_on_connection (rfchandle.item, throughput.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_throughput_from_connection (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_THROUGHPUT_HANDLE_STRUCT_API 
		do
			if attached c_rfc_get_throughput_from_connection (rfchandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_remove_throughput_from_connection (rfchandle: RFC_CONNECTION_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_remove_throughput_from_connection (rfchandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_throughput_on_server (serverhandle: RFC_SERVER_HANDLE_STRUCT_API; throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_throughput_on_server (serverhandle.item, throughput.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_throughput_from_server (serverhandle: RFC_SERVER_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): detachable RFC_THROUGHPUT_HANDLE_STRUCT_API 
		do
			if attached c_rfc_get_throughput_from_server (serverhandle.item, errorinfo.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	rfc_remove_throughput_from_server (serverhandle: RFC_SERVER_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_remove_throughput_from_server (serverhandle.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_reset_throughput (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_reset_throughput (throughput.item, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_number_of_calls (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; numberofcalls: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_number_of_calls (throughput.item, numberofcalls, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_total_time (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; totaltime: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_total_time (throughput.item, totaltime, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_serialization_time (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; serializationtime: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_serialization_time (throughput.item, serializationtime, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_deserialization_time (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; deserializationtime: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_deserialization_time (throughput.item, deserializationtime, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_application_time (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; applicationtime: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_application_time (throughput.item, applicationtime, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_server_time (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; servertime: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_server_time (throughput.item, servertime, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_network_writing_time (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; writingtime: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_network_writing_time (throughput.item, writingtime, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_network_reading_time (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; readingtime: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_network_reading_time (throughput.item, readingtime, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_sent_bytes (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; sentbytes: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_sent_bytes (throughput.item, sentbytes, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_get_received_bytes (throughput: RFC_THROUGHPUT_HANDLE_STRUCT_API; receivedbytes: POINTER; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_get_received_bytes (throughput.item, receivedbytes, errorinfo.item)
		ensure
			instance_free: class
		end

	rfc_set_message_server_response_timeout (timeout: NATURAL; errorinfo: RFC_ERROR_INFO_STRUCT_API): INTEGER 
		do
			Result := c_rfc_set_message_server_response_timeout (timeout, errorinfo.item)
		ensure
			instance_free: class
		end

feature -- Externals

	c_rfc_get_version (majorversion: TYPED_POINTER [NATURAL]; minorversion: TYPED_POINTER [NATURAL]; patchlevel: TYPED_POINTER [NATURAL]): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetVersion ((unsigned*)$majorversion, (unsigned*)$minorversion, (unsigned*)$patchlevel);
			]"
		end

	c_rfc_set_ini_path (pathname: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetIniPath ((SAP_UC const*)$pathname, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_reload_ini_file (errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcReloadIniFile ((RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_trace_level (connection: POINTER; destination: POINTER; tracelevel: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetTraceLevel ((RFC_CONNECTION_HANDLE)$connection, (SAP_UC*)$destination, (unsigned)$tracelevel, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_trace_encoding (traceencoding: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetTraceEncoding ((SAP_UC*)$traceencoding, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_trace_dir (tracedir: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetTraceDir ((SAP_UC*)$tracedir, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_trace_type (tracetype: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetTraceType ((SAP_UC*)$tracetype, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_cpic_trace_level (tracelevel: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetCpicTraceLevel ((unsigned)$tracelevel, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_cpic_keepalive (timeout: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetCpicKeepalive ((unsigned)$timeout, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_socket_trace_level (tracelevel: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetSocketTraceLevel ((unsigned)$tracelevel, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_load_crypto_library (pathtolibrary: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcLoadCryptoLibrary ((SAP_UC const*const )$pathtolibrary, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_websocket_ping_interval (pinginterval: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetWebsocketPingInterval ((unsigned)$pinginterval, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_websocket_pong_timeout (pongtimeout: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetWebsocketPongTimeout ((unsigned)$pongtimeout, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_maximum_trace_file_size (size: NATURAL; unit: CHARACTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetMaximumTraceFileSize ((unsigned)$size, (SAP_UC)$unit, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_maximum_stored_trace_files (numberoffiles: INTEGER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetMaximumStoredTraceFiles ((int)$numberoffiles, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_utf8to_sapuc (utf8: POINTER; utf8length: NATURAL; sapuc: POINTER; sapucsize: TYPED_POINTER [NATURAL]; resultlength: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcUTF8ToSAPUC ((RFC_BYTE const*)$utf8, (unsigned)$utf8length, (SAP_UC*)$sapuc, (unsigned*)$sapucsize, (unsigned*)$resultlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_sapucto_utf8 (sapuc: POINTER; sapuclength: NATURAL; utf8: POINTER; utf8size: TYPED_POINTER [NATURAL]; resultlength: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSAPUCToUTF8 ((SAP_UC const*)$sapuc, (unsigned)$sapuclength, (RFC_BYTE*)$utf8, (unsigned*)$utf8size, (unsigned*)$resultlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_rc_as_string (rc: INTEGER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetRcAsString ((RFC_RC)$rc);
			]"
		end

	c_rfc_get_type_as_string (type: INTEGER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetTypeAsString ((RFCTYPE)$type);
			]"
		end

	c_rfc_get_direction_as_string (direction: INTEGER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetDirectionAsString ((RFC_DIRECTION)$direction);
			]"
		end

	c_rfc_get_server_state_as_string (serverstate: INTEGER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetServerStateAsString ((RFC_SERVER_STATE)$serverstate);
			]"
		end

	c_rfc_get_session_event_as_string (sessionevent: INTEGER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetSessionEventAsString ((RFC_SESSION_EVENT)$sessionevent);
			]"
		end

	c_rfc_language_iso_to_sap (laiso: POINTER; lang: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcLanguageIsoToSap ((SAP_UC const*)$laiso, (SAP_UC*)$lang, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_language_sap_to_iso (lang: POINTER; laiso: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcLanguageSapToIso ((SAP_UC const*)$lang, (SAP_UC*)$laiso, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_saplogon_entries (saplogonidlist: POINTER; numsaplogonids: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetSaplogonEntries ((SAP_UC***)$saplogonidlist, (unsigned*)$numsaplogonids, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_free_saplogon_entries (saplogonidlist: POINTER; numsaplogonids: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcFreeSaplogonEntries ((SAP_UC***)$saplogonidlist, (unsigned*)$numsaplogonids, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_saplogon_entry (saplogonid: POINTER; entryparameters: POINTER; numparameters: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetSaplogonEntry ((SAP_UC*)$saplogonid, (RFC_CONNECTION_PARAMETER**)$entryparameters, (unsigned*)$numparameters, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_free_saplogon_entry (entryparameters: POINTER; numparameters: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcFreeSaplogonEntry ((RFC_CONNECTION_PARAMETER**)$entryparameters, (unsigned*)$numparameters, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_open_connection (connectionparams: POINTER; paramcount: NATURAL; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcOpenConnection ((RFC_CONNECTION_PARAMETER const*)$connectionparams, (unsigned)$paramcount, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_register_server (connectionparams: POINTER; paramcount: NATURAL; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcRegisterServer ((RFC_CONNECTION_PARAMETER const*)$connectionparams, (unsigned)$paramcount, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_start_server (argc: INTEGER; argv: POINTER; connectionparams: POINTER; paramcount: NATURAL; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcStartServer ((int)$argc, (SAP_UC**)$argv, (RFC_CONNECTION_PARAMETER const*)$connectionparams, (unsigned)$paramcount, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_close_connection (rfchandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCloseConnection ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_is_connection_handle_valid (rfchandle: POINTER; isvalid: TYPED_POINTER [INTEGER]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcIsConnectionHandleValid ((RFC_CONNECTION_HANDLE)$rfchandle, (int*)$isvalid, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_cancel (rfchandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCancel ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_reset_server_context (rfchandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcResetServerContext ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_ping (rfchandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcPing ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_connection_attributes (rfchandle: POINTER; attr: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetConnectionAttributes ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_ATTRIBUTES*)$attr, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_server_context (rfchandle: POINTER; context: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetServerContext ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_SERVER_CONTEXT*)$context, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_sap_router (rfchandle: POINTER; saprouter: POINTER; length: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetSapRouter ((RFC_CONNECTION_HANDLE)$rfchandle, (SAP_UC*)$saprouter, (unsigned*)$length, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_partner_external_ip (rfchandle: POINTER; partnerexternalip: POINTER; length: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetPartnerExternalIP ((RFC_CONNECTION_HANDLE)$rfchandle, (SAP_UC*)$partnerexternalip, (unsigned*)$length, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_partner_ssoticket (rfchandle: POINTER; ssoticket: POINTER; length: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetPartnerSSOTicket ((RFC_CONNECTION_HANDLE)$rfchandle, (SAP_UC*)$ssoticket, (unsigned*)$length, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_partner_sncname (rfchandle: POINTER; sncname: POINTER; length: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetPartnerSNCName ((RFC_CONNECTION_HANDLE)$rfchandle, (SAP_UC*)$sncname, (unsigned)$length, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_partner_snckey (rfchandle: POINTER; snckey: POINTER; length: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetPartnerSNCKey ((RFC_CONNECTION_HANDLE)$rfchandle, (SAP_RAW*)$snckey, (unsigned*)$length, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_sncname_to_key (snclib: POINTER; sncname: POINTER; snckey: POINTER; keylength: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSNCNameToKey ((SAP_UC const*)$snclib, (SAP_UC const*)$sncname, (SAP_RAW*)$snckey, (unsigned*)$keylength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_snckey_to_name (snclib: POINTER; snckey: POINTER; keylength: NATURAL; sncname: POINTER; namelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSNCKeyToName ((SAP_UC const*)$snclib, (SAP_RAW const*)$snckey, (unsigned)$keylength, (SAP_UC*)$sncname, (unsigned)$namelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_listen_and_dispatch (rfchandle: POINTER; timeout: INTEGER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcListenAndDispatch ((RFC_CONNECTION_HANDLE)$rfchandle, (int)$timeout, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_invoke (rfchandle: POINTER; funchandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcInvoke ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_FUNCTION_HANDLE)$funchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_create_server (connectionparams: POINTER; paramcount: NATURAL; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCreateServer ((RFC_CONNECTION_PARAMETER const*)$connectionparams, (unsigned)$paramcount, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_server (serverhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyServer ((RFC_SERVER_HANDLE)$serverhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_launch_server (serverhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcLaunchServer ((RFC_SERVER_HANDLE)$serverhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_shutdown_server (serverhandle: POINTER; timeout: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcShutdownServer ((RFC_SERVER_HANDLE)$serverhandle, (unsigned)$timeout, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_server_attributes (serverhandle: POINTER; serverattributes: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetServerAttributes ((RFC_SERVER_HANDLE)$serverhandle, (RFC_SERVER_ATTRIBUTES*)$serverattributes, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_server_connection_monitor_data (serverhandle: POINTER; numberofconnections: TYPED_POINTER [NATURAL]; connectiondata: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetServerConnectionMonitorData ((RFC_SERVER_HANDLE)$serverhandle, (unsigned*)$numberofconnections, (RFC_SERVER_MONITOR_DATA**)$connectiondata, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_server_connection_monitor_data (numberofconnections: NATURAL; connectiondata: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyServerConnectionMonitorData ((unsigned)$numberofconnections, (RFC_SERVER_MONITOR_DATA*)$connectiondata, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_server_error_listener (serverhandle: POINTER; errorlistener: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddServerErrorListener ((RFC_SERVER_HANDLE)$serverhandle, (RFC_SERVER_ERROR_LISTENER)$errorlistener, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_server_state_changed_listener (serverhandle: POINTER; statechangelistener: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddServerStateChangedListener ((RFC_SERVER_HANDLE)$serverhandle, (RFC_SERVER_STATE_CHANGE_LISTENER)$statechangelistener, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_server_session_changed_listener (serverhandle: POINTER; sessionchangelistener: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddServerSessionChangedListener ((RFC_SERVER_HANDLE)$serverhandle, (RFC_SERVER_SESSION_CHANGE_LISTENER)$sessionchangelistener, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_server_stateful (connectionhandle: POINTER; isstateful: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetServerStateful ((RFC_CONNECTION_HANDLE)$connectionhandle, (unsigned)$isstateful, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_install_authentication_check_handler (onauthenticationcheck: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcInstallAuthenticationCheckHandler ((RFC_ON_AUTHENTICATION_CHECK)$onauthenticationcheck, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_authentication_type (authenticationhandle: POINTER; type: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetAuthenticationType ((RFC_AUTHENTICATION_HANDLE)$authenticationhandle, (RFC_AUTHENTICATION_TYPE*)$type, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_authentication_user (authenticationhandle: POINTER; user: POINTER; length: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetAuthenticationUser ((RFC_AUTHENTICATION_HANDLE)$authenticationhandle, (SAP_UC const**)$user, (unsigned*)$length, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_authentication_password (authenticationhandle: POINTER; password: POINTER; length: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetAuthenticationPassword ((RFC_AUTHENTICATION_HANDLE)$authenticationhandle, (SAP_UC const**)$password, (unsigned*)$length, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_authentication_assertion_ticket (authenticationhandle: POINTER; assertionticket: POINTER; length: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetAuthenticationAssertionTicket ((RFC_AUTHENTICATION_HANDLE)$authenticationhandle, (SAP_UC const**)$assertionticket, (unsigned*)$length, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_authentication_certificate_data (authenticationhandle: POINTER; certificatedata: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetAuthenticationCertificateData ((RFC_AUTHENTICATION_HANDLE)$authenticationhandle, (RFC_CERTIFICATE_DATA const**)$certificatedata, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_transaction_id (rfchandle: POINTER; tid: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetTransactionID ((RFC_CONNECTION_HANDLE)$rfchandle, $tid, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_create_transaction (rfchandle: POINTER; tid: POINTER; queuename: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCreateTransaction ((RFC_CONNECTION_HANDLE)$rfchandle, $tid, (SAP_UC const*)$queuename, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_invoke_in_transaction (thandle: POINTER; funchandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcInvokeInTransaction ((RFC_TRANSACTION_HANDLE)$thandle, (RFC_FUNCTION_HANDLE)$funchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_submit_transaction (thandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSubmitTransaction ((RFC_TRANSACTION_HANDLE)$thandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_confirm_transaction (thandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcConfirmTransaction ((RFC_TRANSACTION_HANDLE)$thandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_confirm_transaction_id (rfchandle: POINTER; tid: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcConfirmTransactionID ((RFC_CONNECTION_HANDLE)$rfchandle, $tid, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_transaction (thandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyTransaction ((RFC_TRANSACTION_HANDLE)$thandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_unit_id (rfchandle: POINTER; uid: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetUnitID ((RFC_CONNECTION_HANDLE)$rfchandle, $uid, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_invoke_in_unit (unithandle: POINTER; funchandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcInvokeInUnit ((RFC_UNIT_HANDLE)$unithandle, (RFC_FUNCTION_HANDLE)$funchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_submit_unit (unithandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSubmitUnit ((RFC_UNIT_HANDLE)$unithandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_confirm_unit (rfchandle: POINTER; identifier: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcConfirmUnit ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_UNIT_IDENTIFIER*)$identifier, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_unit (unithandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyUnit ((RFC_UNIT_HANDLE)$unithandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_unit_state (rfchandle: POINTER; identifier: POINTER; state: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetUnitState ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_UNIT_IDENTIFIER*)$identifier, (RFC_UNIT_STATE*)$state, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_install_server_function (sysid: POINTER; funcdeschandle: POINTER; serverfunction: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcInstallServerFunction ((SAP_UC const*)$sysid, (RFC_FUNCTION_DESC_HANDLE)$funcdeschandle, (RFC_SERVER_FUNCTION)$serverfunction, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_install_generic_server_function (serverfunction: POINTER; funcdescprovider: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcInstallGenericServerFunction ((RFC_SERVER_FUNCTION)$serverfunction, (RFC_FUNC_DESC_CALLBACK)$funcdescprovider, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_install_password_change_handler (onpasswordchange: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcInstallPasswordChangeHandler ((RFC_ON_PASSWORD_CHANGE)$onpasswordchange, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_install_authorization_check_handler (onauthorizationcheck: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcInstallAuthorizationCheckHandler ((RFC_ON_AUTHORIZATION_CHECK)$onauthorizationcheck, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_create_function (funcdeschandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCreateFunction ((RFC_FUNCTION_DESC_HANDLE)$funcdeschandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_function (funchandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyFunction ((RFC_FUNCTION_HANDLE)$funchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_parameter_active (funchandle: POINTER; paramname: POINTER; isactive: INTEGER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetParameterActive ((RFC_FUNCTION_HANDLE)$funchandle, (SAP_UC const*)$paramname, (int)$isactive, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_is_parameter_active (funchandle: POINTER; paramname: POINTER; isactive: TYPED_POINTER [INTEGER]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcIsParameterActive ((RFC_FUNCTION_HANDLE)$funchandle, (SAP_UC const*)$paramname, (int*)$isactive, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_create_structure (typedeschandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCreateStructure ((RFC_TYPE_DESC_HANDLE)$typedeschandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_clone_structure (srcstructurehandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCloneStructure ((RFC_STRUCTURE_HANDLE)$srcstructurehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_structure (structhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyStructure ((RFC_STRUCTURE_HANDLE)$structhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_create_table (typedeschandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCreateTable ((RFC_TYPE_DESC_HANDLE)$typedeschandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_clone_table (srctablehandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCloneTable ((RFC_TABLE_HANDLE)$srctablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_table (tablehandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyTable ((RFC_TABLE_HANDLE)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_current_row (tablehandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetCurrentRow ((RFC_TABLE_HANDLE)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_append_new_row (tablehandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAppendNewRow ((RFC_TABLE_HANDLE)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_reserve_capacity (tablehandle: POINTER; numrows: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcReserveCapacity ((RFC_TABLE_HANDLE)$tablehandle, (unsigned)$numrows, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_append_new_rows (tablehandle: POINTER; numrows: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAppendNewRows ((RFC_TABLE_HANDLE)$tablehandle, (unsigned)$numrows, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_insert_new_row (tablehandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcInsertNewRow ((RFC_TABLE_HANDLE)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_append_row (tablehandle: POINTER; structhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAppendRow ((RFC_TABLE_HANDLE)$tablehandle, (RFC_STRUCTURE_HANDLE)$structhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_insert_row (tablehandle: POINTER; structhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcInsertRow ((RFC_TABLE_HANDLE)$tablehandle, (RFC_STRUCTURE_HANDLE)$structhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_delete_current_row (tablehandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDeleteCurrentRow ((RFC_TABLE_HANDLE)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_delete_all_rows (tablehandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDeleteAllRows ((RFC_TABLE_HANDLE)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_move_to_first_row (tablehandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcMoveToFirstRow ((RFC_TABLE_HANDLE)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_move_to_last_row (tablehandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcMoveToLastRow ((RFC_TABLE_HANDLE)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_move_to_next_row (tablehandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcMoveToNextRow ((RFC_TABLE_HANDLE)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_move_to_previous_row (tablehandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcMoveToPreviousRow ((RFC_TABLE_HANDLE)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_move_to (tablehandle: POINTER; index: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcMoveTo ((RFC_TABLE_HANDLE)$tablehandle, (unsigned)$index, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_row_count (tablehandle: POINTER; rowcount: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetRowCount ((RFC_TABLE_HANDLE)$tablehandle, (unsigned*)$rowcount, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_row_type (tablehandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetRowType ((RFC_TABLE_HANDLE)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_create_abap_object (classdeschandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCreateAbapObject ((RFC_CLASS_DESC_HANDLE)$classdeschandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_abap_object (objhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyAbapObject ((RFC_ABAP_OBJECT_HANDLE)$objhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_chars (datahandle: POINTER; name: POINTER; charbuffer: POINTER; bufferlength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetChars ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_CHAR*)$charbuffer, (unsigned)$bufferlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_chars_by_index (datahandle: POINTER; index: NATURAL; charbuffer: POINTER; bufferlength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetCharsByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_CHAR*)$charbuffer, (unsigned)$bufferlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_num (datahandle: POINTER; name: POINTER; charbuffer: POINTER; bufferlength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetNum ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_NUM*)$charbuffer, (unsigned)$bufferlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_num_by_index (datahandle: POINTER; index: NATURAL; charbuffer: POINTER; bufferlength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetNumByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_NUM*)$charbuffer, (unsigned)$bufferlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_date (datahandle: POINTER; name: POINTER; emptydate: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetDate ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, $emptydate, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_date_by_index (datahandle: POINTER; index: NATURAL; emptydate: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetDateByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, $emptydate, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_time (datahandle: POINTER; name: POINTER; emptytime: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetTime ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, $emptytime, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_time_by_index (datahandle: POINTER; index: NATURAL; emptytime: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetTimeByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, $emptytime, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_string (datahandle: POINTER; name: POINTER; stringbuffer: POINTER; bufferlength: NATURAL; stringlength: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetString ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (SAP_UC*)$stringbuffer, (unsigned)$bufferlength, (unsigned*)$stringlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_string_by_index (datahandle: POINTER; index: NATURAL; stringbuffer: POINTER; bufferlength: NATURAL; stringlength: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetStringByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (SAP_UC*)$stringbuffer, (unsigned)$bufferlength, (unsigned*)$stringlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_bytes (datahandle: POINTER; name: POINTER; bytebuffer: POINTER; bufferlength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetBytes ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (SAP_RAW*)$bytebuffer, (unsigned)$bufferlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_bytes_by_index (datahandle: POINTER; index: NATURAL; bytebuffer: POINTER; bufferlength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetBytesByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (SAP_RAW*)$bytebuffer, (unsigned)$bufferlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_xstring (datahandle: POINTER; name: POINTER; bytebuffer: POINTER; bufferlength: NATURAL; xstringlength: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetXString ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (SAP_RAW*)$bytebuffer, (unsigned)$bufferlength, (unsigned*)$xstringlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_xstring_by_index (datahandle: POINTER; index: NATURAL; bytebuffer: POINTER; bufferlength: NATURAL; xstringlength: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetXStringByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (SAP_RAW*)$bytebuffer, (unsigned)$bufferlength, (unsigned*)$xstringlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_int (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetInt ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_INT*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_int_by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetIntByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_INT*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_int1 (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetInt1 ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_INT1*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_int1by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetInt1ByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_INT1*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_int2 (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetInt2 ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_INT2*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_int2by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetInt2ByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_INT2*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_int8 (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetInt8 ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_INT8*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_int8by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetInt8ByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_INT8*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_float (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetFloat ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_FLOAT*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_float_by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetFloatByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_FLOAT*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_dec_f16 (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetDecF16 ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_DECF16*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_dec_f16by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetDecF16ByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_DECF16*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_dec_f34 (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetDecF34 ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_DECF34*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_dec_f34by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetDecF34ByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_DECF34*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_structure (datahandle: POINTER; name: POINTER; structhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetStructure ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_STRUCTURE_HANDLE*)$structhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_structure_by_index (datahandle: POINTER; index: NATURAL; structhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetStructureByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_STRUCTURE_HANDLE*)$structhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_structure_into_char_buffer (datahandle: POINTER; charbuffer: POINTER; bufferlength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetStructureIntoCharBuffer ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC*)$charbuffer, (unsigned)$bufferlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_table (datahandle: POINTER; name: POINTER; tablehandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetTable ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_TABLE_HANDLE*)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_table_by_index (datahandle: POINTER; index: NATURAL; tablehandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetTableByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_TABLE_HANDLE*)$tablehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_abap_object (datahandle: POINTER; name: POINTER; objhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetAbapObject ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_ABAP_OBJECT_HANDLE*)$objhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_abap_object_by_index (datahandle: POINTER; index: NATURAL; objhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetAbapObjectByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_ABAP_OBJECT_HANDLE*)$objhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_string_length (datahandle: POINTER; name: POINTER; stringlength: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetStringLength ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (unsigned*)$stringlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_string_length_by_index (datahandle: POINTER; index: NATURAL; stringlength: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetStringLengthByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (unsigned*)$stringlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_chars (datahandle: POINTER; name: POINTER; charvalue: POINTER; valuelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetChars ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_CHAR const*)$charvalue, (unsigned)$valuelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_chars_by_index (datahandle: POINTER; index: NATURAL; charvalue: POINTER; valuelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetCharsByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_CHAR const*)$charvalue, (unsigned)$valuelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_num (datahandle: POINTER; name: POINTER; charvalue: POINTER; valuelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetNum ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_NUM const*)$charvalue, (unsigned)$valuelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_num_by_index (datahandle: POINTER; index: NATURAL; charvalue: POINTER; valuelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetNumByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_NUM const*)$charvalue, (unsigned)$valuelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_string (datahandle: POINTER; name: POINTER; stringvalue: POINTER; valuelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetString ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (SAP_UC const*)$stringvalue, (unsigned)$valuelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_string_by_index (datahandle: POINTER; index: NATURAL; stringvalue: POINTER; valuelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetStringByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (SAP_UC const*)$stringvalue, (unsigned)$valuelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_date (datahandle: POINTER; name: POINTER; date: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetDate ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, $date, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_date_by_index (datahandle: POINTER; index: NATURAL; date: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetDateByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, $date, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_time (datahandle: POINTER; name: POINTER; time: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetTime ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, $time, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_time_by_index (datahandle: POINTER; index: NATURAL; time: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetTimeByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, $time, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_bytes (datahandle: POINTER; name: POINTER; bytevalue: POINTER; valuelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetBytes ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (SAP_RAW const*)$bytevalue, (unsigned)$valuelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_bytes_by_index (datahandle: POINTER; index: NATURAL; bytevalue: POINTER; valuelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetBytesByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (SAP_RAW const*)$bytevalue, (unsigned)$valuelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_xstring (datahandle: POINTER; name: POINTER; bytevalue: POINTER; valuelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetXString ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (SAP_RAW const*)$bytevalue, (unsigned)$valuelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_xstring_by_index (datahandle: POINTER; index: NATURAL; bytevalue: POINTER; valuelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetXStringByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (SAP_RAW const*)$bytevalue, (unsigned)$valuelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_int (datahandle: POINTER; name: POINTER; value: INTEGER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetInt ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_INT const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_int_by_index (datahandle: POINTER; index: NATURAL; value: INTEGER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetIntByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_INT const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_int1 (datahandle: POINTER; name: POINTER; value: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetInt1 ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_INT1 const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_int1by_index (datahandle: POINTER; index: NATURAL; value: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetInt1ByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_INT1 const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_int2 (datahandle: POINTER; name: POINTER; value: INTEGER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetInt2 ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_INT2 const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_int2by_index (datahandle: POINTER; index: NATURAL; value: INTEGER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetInt2ByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_INT2 const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_int8 (datahandle: POINTER; name: POINTER; value: INTEGER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetInt8 ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_INT8 const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_int8by_index (datahandle: POINTER; index: NATURAL; value: INTEGER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetInt8ByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_INT8 const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_float (datahandle: POINTER; name: POINTER; value: REAL_64; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetFloat ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_FLOAT const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_float_by_index (datahandle: POINTER; index: NATURAL; value: REAL_64; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetFloatByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_FLOAT const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_dec_f16 (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetDecF16 ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, *(RFC_DECF16 const*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_dec_f16by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetDecF16ByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, *(RFC_DECF16 const*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_dec_f34 (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetDecF34 ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, *(RFC_DECF34 const*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_dec_f34by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetDecF34ByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, *(RFC_DECF34 const*)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_structure (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetStructure ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_STRUCTURE_HANDLE const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_structure_by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetStructureByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_STRUCTURE_HANDLE const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_structure_from_char_buffer (datahandle: POINTER; charbuffer: POINTER; bufferlength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetStructureFromCharBuffer ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC*)$charbuffer, (unsigned)$bufferlength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_table (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetTable ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_TABLE_HANDLE const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_table_by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetTableByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_TABLE_HANDLE const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_abap_object (datahandle: POINTER; name: POINTER; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetAbapObject ((DATA_CONTAINER_HANDLE)$datahandle, (SAP_UC const*)$name, (RFC_ABAP_OBJECT_HANDLE const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_abap_object_by_index (datahandle: POINTER; index: NATURAL; value: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetAbapObjectByIndex ((DATA_CONTAINER_HANDLE)$datahandle, (unsigned)$index, (RFC_ABAP_OBJECT_HANDLE const)$value, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_abap_class_exception (funchandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetAbapClassException ((RFC_FUNCTION_HANDLE)$funchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_abap_class_exception (funchandle: POINTER; excphandle: POINTER; exceptiontext: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetAbapClassException ((RFC_FUNCTION_HANDLE)$funchandle, (RFC_ABAP_OBJECT_HANDLE)$excphandle, (SAP_UC const*)$exceptiontext, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_describe_function (funchandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDescribeFunction ((RFC_FUNCTION_HANDLE)$funchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_describe_type (datahandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDescribeType ((DATA_CONTAINER_HANDLE)$datahandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_function_desc (rfchandle: POINTER; funcname: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetFunctionDesc ((RFC_CONNECTION_HANDLE)$rfchandle, (SAP_UC const*)$funcname, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_cached_function_desc (repositoryid: POINTER; funcname: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetCachedFunctionDesc ((SAP_UC const*)$repositoryid, (SAP_UC const*)$funcname, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_function_desc (repositoryid: POINTER; funcdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddFunctionDesc ((SAP_UC const*)$repositoryid, (RFC_FUNCTION_DESC_HANDLE)$funcdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_remove_function_desc (repositoryid: POINTER; functionname: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcRemoveFunctionDesc ((SAP_UC const*)$repositoryid, (SAP_UC const*)$functionname, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_type_desc (rfchandle: POINTER; typename: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetTypeDesc ((RFC_CONNECTION_HANDLE)$rfchandle, (SAP_UC const*)$typename, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_cached_type_desc (repositoryid: POINTER; typename: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetCachedTypeDesc ((SAP_UC const*)$repositoryid, (SAP_UC const*)$typename, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_type_desc (repositoryid: POINTER; typehandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddTypeDesc ((SAP_UC const*)$repositoryid, (RFC_TYPE_DESC_HANDLE)$typehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_remove_type_desc (repositoryid: POINTER; typename: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcRemoveTypeDesc ((SAP_UC const*)$repositoryid, (SAP_UC const*)$typename, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_class_desc (rfchandle: POINTER; classname: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetClassDesc ((RFC_CONNECTION_HANDLE)$rfchandle, (SAP_UC const*)$classname, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_cached_class_desc (repositoryid: POINTER; classname: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetCachedClassDesc ((SAP_UC const*)$repositoryid, (SAP_UC const*)$classname, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_describe_abap_object (objecthandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDescribeAbapObject ((RFC_ABAP_OBJECT_HANDLE)$objecthandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_class_desc (repositoryid: POINTER; classdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddClassDesc ((SAP_UC const*)$repositoryid, (RFC_CLASS_DESC_HANDLE)$classdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_remove_class_desc (repositoryid: POINTER; classname: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcRemoveClassDesc ((SAP_UC const*)$repositoryid, (SAP_UC const*)$classname, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_clear_repository (repositoryid: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcClearRepository ((SAP_UC const*)$repositoryid, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_save_repository (repositoryid: POINTER; targetstream: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSaveRepository ((SAP_UC const*)$repositoryid, (FILE*const )$targetstream, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_load_repository (repositoryid: POINTER; targetstream: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcLoadRepository ((SAP_UC const*)$repositoryid, (FILE*const )$targetstream, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_create_type_desc (name: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCreateTypeDesc ((SAP_UC const*)$name, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_type_field (typehandle: POINTER; fielddescr: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddTypeField ((RFC_TYPE_DESC_HANDLE)$typehandle, (RFC_FIELD_DESC const*)$fielddescr, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_type_length (typehandle: POINTER; nucbytelength: NATURAL; ucbytelength: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetTypeLength ((RFC_TYPE_DESC_HANDLE)$typehandle, (unsigned)$nucbytelength, (unsigned)$ucbytelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_type_name (typehandle: POINTER; bufferforname: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetTypeName ((RFC_TYPE_DESC_HANDLE)$typehandle, $bufferforname, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_field_count (typehandle: POINTER; count: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetFieldCount ((RFC_TYPE_DESC_HANDLE)$typehandle, (unsigned*)$count, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_field_desc_by_index (typehandle: POINTER; index: NATURAL; fielddescr: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetFieldDescByIndex ((RFC_TYPE_DESC_HANDLE)$typehandle, (unsigned)$index, (RFC_FIELD_DESC*)$fielddescr, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_field_desc_by_name (typehandle: POINTER; name: POINTER; fielddescr: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetFieldDescByName ((RFC_TYPE_DESC_HANDLE)$typehandle, (SAP_UC const*)$name, (RFC_FIELD_DESC*)$fielddescr, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_type_length (typehandle: POINTER; nucbytelength: TYPED_POINTER [NATURAL]; ucbytelength: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetTypeLength ((RFC_TYPE_DESC_HANDLE)$typehandle, (unsigned*)$nucbytelength, (unsigned*)$ucbytelength, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_type_desc (typehandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyTypeDesc ((RFC_TYPE_DESC_HANDLE)$typehandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_create_function_desc (name: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCreateFunctionDesc ((SAP_UC const*)$name, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_function_name (funcdesc: POINTER; bufferforname: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetFunctionName ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, $bufferforname, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_parameter (funcdesc: POINTER; paramdescr: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddParameter ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, (RFC_PARAMETER_DESC const*)$paramdescr, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_parameter_count (funcdesc: POINTER; count: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetParameterCount ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, (unsigned*)$count, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_parameter_desc_by_index (funcdesc: POINTER; index: NATURAL; paramdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetParameterDescByIndex ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, (unsigned)$index, (RFC_PARAMETER_DESC*)$paramdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_parameter_desc_by_name (funcdesc: POINTER; name: POINTER; paramdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetParameterDescByName ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, (SAP_UC const*)$name, (RFC_PARAMETER_DESC*)$paramdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_exception (funcdesc: POINTER; excdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddException ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, (RFC_EXCEPTION_DESC const*)$excdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_exception_count (funcdesc: POINTER; count: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetExceptionCount ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, (unsigned*)$count, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_exception_desc_by_index (funcdesc: POINTER; index: NATURAL; excdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetExceptionDescByIndex ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, (unsigned)$index, (RFC_EXCEPTION_DESC*)$excdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_exception_desc_by_name (funcdesc: POINTER; name: POINTER; excdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetExceptionDescByName ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, (SAP_UC const*)$name, (RFC_EXCEPTION_DESC*)$excdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_enable_basxml (funcdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcEnableBASXML ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_is_basxmlsupported (funcdesc: POINTER; isenabled: TYPED_POINTER [INTEGER]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcIsBASXMLSupported ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, (int*)$isenabled, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_function_desc (funcdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyFunctionDesc ((RFC_FUNCTION_DESC_HANDLE)$funcdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_enable_abap_class_exception (funchandle: POINTER; rfchandlerepository: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcEnableAbapClassException ((RFC_FUNCTION_HANDLE)$funchandle, (RFC_CONNECTION_HANDLE)$rfchandlerepository, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_is_abap_class_exception_enabled (funchandle: POINTER; isenabled: TYPED_POINTER [INTEGER]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcIsAbapClassExceptionEnabled ((RFC_FUNCTION_HANDLE)$funchandle, (int*)$isenabled, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_create_class_desc (name: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCreateClassDesc ((SAP_UC const*)$name, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_class_name (classdesc: POINTER; bufferforname: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetClassName ((RFC_CLASS_DESC_HANDLE)$classdesc, $bufferforname, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_class_attribute (classdesc: POINTER; attrdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddClassAttribute ((RFC_CLASS_DESC_HANDLE)$classdesc, (RFC_CLASS_ATTRIBUTE_DESC const*)$attrdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_class_attributes_count (classdesc: POINTER; count: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetClassAttributesCount ((RFC_CLASS_DESC_HANDLE)$classdesc, (unsigned*)$count, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_class_attribute_desc_by_index (classdesc: POINTER; index: NATURAL; attrdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetClassAttributeDescByIndex ((RFC_CLASS_DESC_HANDLE)$classdesc, (unsigned)$index, (RFC_CLASS_ATTRIBUTE_DESC*)$attrdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_class_attribute_desc_by_name (classdesc: POINTER; name: POINTER; attrdesc: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetClassAttributeDescByName ((RFC_CLASS_DESC_HANDLE)$classdesc, (SAP_UC const*)$name, (RFC_CLASS_ATTRIBUTE_DESC*)$attrdesc, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_parent_class_by_index (classdesc: POINTER; name: POINTER; index: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetParentClassByIndex ((RFC_CLASS_DESC_HANDLE)$classdesc, $name, (unsigned)$index, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_parent_classes_count (classdesc: POINTER; parentclassescount: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetParentClassesCount ((RFC_CLASS_DESC_HANDLE)$classdesc, (unsigned*)$parentclassescount, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_parent_class (classdesc: POINTER; name: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddParentClass ((RFC_CLASS_DESC_HANDLE)$classdesc, $name, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_implemented_interface_by_index (classdesc: POINTER; index: NATURAL; name: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetImplementedInterfaceByIndex ((RFC_CLASS_DESC_HANDLE)$classdesc, (unsigned)$index, $name, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_implemented_interfaces_count (classdesc: POINTER; implementedinterfacescount: TYPED_POINTER [NATURAL]; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetImplementedInterfacesCount ((RFC_CLASS_DESC_HANDLE)$classdesc, (unsigned*)$implementedinterfacescount, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_add_implemented_interface (classdesc: POINTER; name: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcAddImplementedInterface ((RFC_CLASS_DESC_HANDLE)$classdesc, $name, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_class_desc (classhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyClassDesc ((RFC_CLASS_DESC_HANDLE)$classhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_create_metadata_query_result (errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCreateMetadataQueryResult ((RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_metadata_query_result (handle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyMetadataQueryResult ((RFC_METADATA_QUERY_RESULT_HANDLE)$handle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_create_throughput (errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcCreateThroughput ((RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_destroy_throughput (throughput: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcDestroyThroughput ((RFC_THROUGHPUT_HANDLE)$throughput, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_throughput_on_connection (rfchandle: POINTER; throughput: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetThroughputOnConnection ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_THROUGHPUT_HANDLE)$throughput, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_throughput_from_connection (rfchandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetThroughputFromConnection ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_remove_throughput_from_connection (rfchandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcRemoveThroughputFromConnection ((RFC_CONNECTION_HANDLE)$rfchandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_throughput_on_server (serverhandle: POINTER; throughput: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetThroughputOnServer ((RFC_SERVER_HANDLE)$serverhandle, (RFC_THROUGHPUT_HANDLE)$throughput, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_throughput_from_server (serverhandle: POINTER; errorinfo: POINTER): POINTER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetThroughputFromServer ((RFC_SERVER_HANDLE)$serverhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_remove_throughput_from_server (serverhandle: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcRemoveThroughputFromServer ((RFC_SERVER_HANDLE)$serverhandle, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_reset_throughput (throughput: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcResetThroughput ((RFC_THROUGHPUT_HANDLE)$throughput, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_number_of_calls (throughput: POINTER; numberofcalls: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetNumberOfCalls ((RFC_THROUGHPUT_HANDLE)$throughput, (SAP_ULLONG*)$numberofcalls, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_total_time (throughput: POINTER; totaltime: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetTotalTime ((RFC_THROUGHPUT_HANDLE)$throughput, (SAP_ULLONG*)$totaltime, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_serialization_time (throughput: POINTER; serializationtime: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetSerializationTime ((RFC_THROUGHPUT_HANDLE)$throughput, (SAP_ULLONG*)$serializationtime, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_deserialization_time (throughput: POINTER; deserializationtime: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetDeserializationTime ((RFC_THROUGHPUT_HANDLE)$throughput, (SAP_ULLONG*)$deserializationtime, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_application_time (throughput: POINTER; applicationtime: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetApplicationTime ((RFC_THROUGHPUT_HANDLE)$throughput, (SAP_ULLONG*)$applicationtime, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_server_time (throughput: POINTER; servertime: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetServerTime ((RFC_THROUGHPUT_HANDLE)$throughput, (SAP_ULLONG*)$servertime, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_network_writing_time (throughput: POINTER; writingtime: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetNetworkWritingTime ((RFC_THROUGHPUT_HANDLE)$throughput, (SAP_ULLONG*)$writingtime, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_network_reading_time (throughput: POINTER; readingtime: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetNetworkReadingTime ((RFC_THROUGHPUT_HANDLE)$throughput, (SAP_ULLONG*)$readingtime, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_sent_bytes (throughput: POINTER; sentbytes: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetSentBytes ((RFC_THROUGHPUT_HANDLE)$throughput, (SAP_ULLONG*)$sentbytes, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_get_received_bytes (throughput: POINTER; receivedbytes: POINTER; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcGetReceivedBytes ((RFC_THROUGHPUT_HANDLE)$throughput, (SAP_ULLONG*)$receivedbytes, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

	c_rfc_set_message_server_response_timeout (timeout: NATURAL; errorinfo: POINTER): INTEGER
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				return RfcSetMessageServerResponseTimeout ((unsigned)$timeout, (RFC_ERROR_INFO*)$errorinfo);
			]"
		end

feature -- Externals Address

end
