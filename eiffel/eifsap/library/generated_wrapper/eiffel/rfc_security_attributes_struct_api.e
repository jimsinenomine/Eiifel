note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class RFC_SECURITY_ATTRIBUTES_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	functionname:  detachable C_STRING
			-- Access member `functionName`
		require
			exists: exists
		do
			if attached c_functionname (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_functionname (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_functionname (a_value: C_STRING) 
			-- Change the value of member `functionName` to `a_value`.
		require
			exists: exists
		do
			set_c_functionname (item, a_value.item )
		end

	sysid:  detachable C_STRING
			-- Access member `sysId`
		require
			exists: exists
		do
			if attached c_sysid (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_sysid (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_sysid (a_value: C_STRING) 
			-- Change the value of member `sysId` to `a_value`.
		require
			exists: exists
		do
			set_c_sysid (item, a_value.item )
		end

	client:  detachable C_STRING
			-- Access member `client`
		require
			exists: exists
		do
			if attached c_client (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_client (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_client (a_value: C_STRING) 
			-- Change the value of member `client` to `a_value`.
		require
			exists: exists
		do
			set_c_client (item, a_value.item )
		end

	user:  detachable C_STRING
			-- Access member `user`
		require
			exists: exists
		do
			if attached c_user (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_user (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_user (a_value: C_STRING) 
			-- Change the value of member `user` to `a_value`.
		require
			exists: exists
		do
			set_c_user (item, a_value.item )
		end

	progname:  detachable C_STRING
			-- Access member `progName`
		require
			exists: exists
		do
			if attached c_progname (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_progname (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_progname (a_value: C_STRING) 
			-- Change the value of member `progName` to `a_value`.
		require
			exists: exists
		do
			set_c_progname (item, a_value.item )
		end

	sncname:  detachable C_STRING
			-- Access member `sncName`
		require
			exists: exists
		do
			if attached c_sncname (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_sncname (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_sncname (a_value: C_STRING) 
			-- Change the value of member `sncName` to `a_value`.
		require
			exists: exists
		do
			set_c_sncname (item, a_value.item )
		end

	ssoticket:  detachable C_STRING
			-- Access member `ssoTicket`
		require
			exists: exists
		do
			if attached c_ssoticket (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_ssoticket (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_ssoticket (a_value: C_STRING) 
			-- Change the value of member `ssoTicket` to `a_value`.
		require
			exists: exists
		do
			set_c_ssoticket (item, a_value.item )
		end

	sncaclkey:  detachable C_STRING
			-- Access member `sncAclKey`
		require
			exists: exists
		do
			if attached c_sncaclkey (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_sncaclkey (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_sncaclkey (a_value: C_STRING) 
			-- Change the value of member `sncAclKey` to `a_value`.
		require
			exists: exists
		do
			set_c_sncaclkey (item, a_value.item )
		end

	sncaclkeylength: NATURAL
			-- Access member `sncAclKeyLength`
		require
			exists: exists
		do
			Result := c_sncaclkeylength (item)
		ensure
			result_correct: Result = c_sncaclkeylength (item)
		end

	set_sncaclkeylength (a_value: NATURAL) 
			-- Change the value of member `sncAclKeyLength` to `a_value`.
		require
			exists: exists
		do
			set_c_sncaclkeylength (item, a_value)
		ensure
			sncaclkeylength_set: a_value = sncaclkeylength
		end

feature {NONE} -- Implementation wrapper for struct struct _RFC_SECURITY_ATTRIBUTES

	sizeof_external: INTEGER 
		external
			"C inline use <sapnwrfc.h>"
		alias
			"sizeof(struct _RFC_SECURITY_ATTRIBUTES)"
		end

	c_functionname (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->functionName
			]"
		end

	set_c_functionname (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->functionName =  (SAP_UC*)$a_value
			]"
		ensure
			functionname_set: a_value = c_functionname (an_item)
		end

	c_sysid (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->sysId
			]"
		end

	set_c_sysid (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->sysId =  (SAP_UC*)$a_value
			]"
		ensure
			sysid_set: a_value = c_sysid (an_item)
		end

	c_client (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->client
			]"
		end

	set_c_client (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->client =  (SAP_UC*)$a_value
			]"
		ensure
			client_set: a_value = c_client (an_item)
		end

	c_user (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->user
			]"
		end

	set_c_user (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->user =  (SAP_UC*)$a_value
			]"
		ensure
			user_set: a_value = c_user (an_item)
		end

	c_progname (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->progName
			]"
		end

	set_c_progname (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->progName =  (SAP_UC*)$a_value
			]"
		ensure
			progname_set: a_value = c_progname (an_item)
		end

	c_sncname (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->sncName
			]"
		end

	set_c_sncname (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->sncName =  (SAP_UC*)$a_value
			]"
		ensure
			sncname_set: a_value = c_sncname (an_item)
		end

	c_ssoticket (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->ssoTicket
			]"
		end

	set_c_ssoticket (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->ssoTicket =  (SAP_UC*)$a_value
			]"
		ensure
			ssoticket_set: a_value = c_ssoticket (an_item)
		end

	c_sncaclkey (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->sncAclKey
			]"
		end

	set_c_sncaclkey (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->sncAclKey =  (SAP_RAW*)$a_value
			]"
		ensure
			sncaclkey_set: a_value = c_sncaclkey (an_item)
		end

	c_sncaclkeylength (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->sncAclKeyLength
			]"
		end

	set_c_sncaclkeylength (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SECURITY_ATTRIBUTES*)$an_item)->sncAclKeyLength =  (unsigned)$a_value
			]"
		ensure
			sncaclkeylength_set: a_value = c_sncaclkeylength (an_item)
		end

end
