note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class RFC_SERVER_MONITOR_DATA_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	clientinfo: detachable RFC_ATTRIBUTES_STRUCT_API 
			-- Access member `clientInfo`
		require
			exists: exists
		do
			if attached c_clientinfo (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_clientinfo (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_clientinfo (item) 
		end

	set_clientinfo (a_value: RFC_ATTRIBUTES_STRUCT_API) 
			-- Set member `clientInfo`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_clientinfo (item, a_value.item)
		ensure
			clientinfo_set: attached clientinfo as l_value implies l_value.item = a_value.item
		end

	isactive: INTEGER
			-- Access member `isActive`
		require
			exists: exists
		do
			Result := c_isactive (item)
		ensure
			result_correct: Result = c_isactive (item)
		end

	set_isactive (a_value: INTEGER) 
			-- Change the value of member `isActive` to `a_value`.
		require
			exists: exists
		do
			set_c_isactive (item, a_value)
		ensure
			isactive_set: a_value = isactive
		end

	isstateful: INTEGER
			-- Access member `isStateful`
		require
			exists: exists
		do
			Result := c_isstateful (item)
		ensure
			result_correct: Result = c_isstateful (item)
		end

	set_isstateful (a_value: INTEGER) 
			-- Change the value of member `isStateful` to `a_value`.
		require
			exists: exists
		do
			set_c_isstateful (item, a_value)
		ensure
			isstateful_set: a_value = isstateful
		end

	functionmodulename: POINTER
			-- Access member `functionModuleName`
		require
			exists: exists
		do
			Result := c_functionmodulename (item)
		ensure
			result_correct: Result = c_functionmodulename (item)
		end

	lastactivity: INTEGER
			-- Access member `lastActivity`
		require
			exists: exists
		do
			Result := c_lastactivity (item)
		ensure
			result_correct: Result = c_lastactivity (item)
		end

	set_lastactivity (a_value: INTEGER) 
			-- Change the value of member `lastActivity` to `a_value`.
		require
			exists: exists
		do
			set_c_lastactivity (item, a_value)
		ensure
			lastactivity_set: a_value = lastactivity
		end

feature {NONE} -- Implementation wrapper for struct struct _RFC_SERVER_MONITOR_DATA

	sizeof_external: INTEGER 
		external
			"C inline use <sapnwrfc.h>"
		alias
			"sizeof(struct _RFC_SERVER_MONITOR_DATA)"
		end

	c_clientinfo (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_MONITOR_DATA*)$an_item)->clientInfo
			]"
		end

	set_c_clientinfo (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_MONITOR_DATA*)$an_item)->clientInfo =  (RFC_ATTRIBUTES*)$a_value
			]"
		ensure
			clientinfo_set: a_value = c_clientinfo (an_item)
		end

	c_isactive (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_MONITOR_DATA*)$an_item)->isActive
			]"
		end

	set_c_isactive (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_MONITOR_DATA*)$an_item)->isActive =  (int)$a_value
			]"
		ensure
			isactive_set: a_value = c_isactive (an_item)
		end

	c_isstateful (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_MONITOR_DATA*)$an_item)->isStateful
			]"
		end

	set_c_isstateful (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_MONITOR_DATA*)$an_item)->isStateful =  (int)$a_value
			]"
		ensure
			isstateful_set: a_value = c_isstateful (an_item)
		end

	c_functionmodulename (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_MONITOR_DATA*)$an_item)->functionModuleName
			]"
		end

	c_lastactivity (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_MONITOR_DATA*)$an_item)->lastActivity
			]"
		end

	set_c_lastactivity (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_SERVER_MONITOR_DATA*)$an_item)->lastActivity =  (time_t)$a_value
			]"
		ensure
			lastactivity_set: a_value = c_lastactivity (an_item)
		end

end
