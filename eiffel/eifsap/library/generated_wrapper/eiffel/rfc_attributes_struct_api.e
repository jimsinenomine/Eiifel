note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class RFC_ATTRIBUTES_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	dest: POINTER
			-- Access member `dest`
		require
			exists: exists
		do
			Result := c_dest (item)
		ensure
			result_correct: Result = c_dest (item)
		end

	host: POINTER
			-- Access member `host`
		require
			exists: exists
		do
			Result := c_host (item)
		ensure
			result_correct: Result = c_host (item)
		end

	partnerhost: POINTER
			-- Access member `partnerHost`
		require
			exists: exists
		do
			Result := c_partnerhost (item)
		ensure
			result_correct: Result = c_partnerhost (item)
		end

	sysnumber: POINTER
			-- Access member `sysNumber`
		require
			exists: exists
		do
			Result := c_sysnumber (item)
		ensure
			result_correct: Result = c_sysnumber (item)
		end

	sysid: POINTER
			-- Access member `sysId`
		require
			exists: exists
		do
			Result := c_sysid (item)
		ensure
			result_correct: Result = c_sysid (item)
		end

	client: POINTER
			-- Access member `client`
		require
			exists: exists
		do
			Result := c_client (item)
		ensure
			result_correct: Result = c_client (item)
		end

	user: POINTER
			-- Access member `user`
		require
			exists: exists
		do
			Result := c_user (item)
		ensure
			result_correct: Result = c_user (item)
		end

	language: POINTER
			-- Access member `language`
		require
			exists: exists
		do
			Result := c_language (item)
		ensure
			result_correct: Result = c_language (item)
		end

	trace: POINTER
			-- Access member `trace`
		require
			exists: exists
		do
			Result := c_trace (item)
		ensure
			result_correct: Result = c_trace (item)
		end

	isolanguage: POINTER
			-- Access member `isoLanguage`
		require
			exists: exists
		do
			Result := c_isolanguage (item)
		ensure
			result_correct: Result = c_isolanguage (item)
		end

	codepage: POINTER
			-- Access member `codepage`
		require
			exists: exists
		do
			Result := c_codepage (item)
		ensure
			result_correct: Result = c_codepage (item)
		end

	partnercodepage: POINTER
			-- Access member `partnerCodepage`
		require
			exists: exists
		do
			Result := c_partnercodepage (item)
		ensure
			result_correct: Result = c_partnercodepage (item)
		end

	rfcrole: POINTER
			-- Access member `rfcRole`
		require
			exists: exists
		do
			Result := c_rfcrole (item)
		ensure
			result_correct: Result = c_rfcrole (item)
		end

	type: POINTER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	partnertype: POINTER
			-- Access member `partnerType`
		require
			exists: exists
		do
			Result := c_partnertype (item)
		ensure
			result_correct: Result = c_partnertype (item)
		end

	rel: POINTER
			-- Access member `rel`
		require
			exists: exists
		do
			Result := c_rel (item)
		ensure
			result_correct: Result = c_rel (item)
		end

	partnerrel: POINTER
			-- Access member `partnerRel`
		require
			exists: exists
		do
			Result := c_partnerrel (item)
		ensure
			result_correct: Result = c_partnerrel (item)
		end

	kernelrel: POINTER
			-- Access member `kernelRel`
		require
			exists: exists
		do
			Result := c_kernelrel (item)
		ensure
			result_correct: Result = c_kernelrel (item)
		end

	cpicconvid: POINTER
			-- Access member `cpicConvId`
		require
			exists: exists
		do
			Result := c_cpicconvid (item)
		ensure
			result_correct: Result = c_cpicconvid (item)
		end

	progname: POINTER
			-- Access member `progName`
		require
			exists: exists
		do
			Result := c_progname (item)
		ensure
			result_correct: Result = c_progname (item)
		end

	partnerbytesperchar: POINTER
			-- Access member `partnerBytesPerChar`
		require
			exists: exists
		do
			Result := c_partnerbytesperchar (item)
		ensure
			result_correct: Result = c_partnerbytesperchar (item)
		end

	partnersystemcodepage: POINTER
			-- Access member `partnerSystemCodepage`
		require
			exists: exists
		do
			Result := c_partnersystemcodepage (item)
		ensure
			result_correct: Result = c_partnersystemcodepage (item)
		end

	partnerip: POINTER
			-- Access member `partnerIP`
		require
			exists: exists
		do
			Result := c_partnerip (item)
		ensure
			result_correct: Result = c_partnerip (item)
		end

	partneripv6: POINTER
			-- Access member `partnerIPv6`
		require
			exists: exists
		do
			Result := c_partneripv6 (item)
		ensure
			result_correct: Result = c_partneripv6 (item)
		end

	reserved: POINTER
			-- Access member `reserved`
		require
			exists: exists
		do
			Result := c_reserved (item)
		ensure
			result_correct: Result = c_reserved (item)
		end

feature {NONE} -- Implementation wrapper for struct struct _RFC_ATTRIBUTES

	sizeof_external: INTEGER 
		external
			"C inline use <sapnwrfc.h>"
		alias
			"sizeof(struct _RFC_ATTRIBUTES)"
		end

	c_dest (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->dest
			]"
		end

	c_host (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->host
			]"
		end

	c_partnerhost (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->partnerHost
			]"
		end

	c_sysnumber (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->sysNumber
			]"
		end

	c_sysid (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->sysId
			]"
		end

	c_client (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->client
			]"
		end

	c_user (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->user
			]"
		end

	c_language (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->language
			]"
		end

	c_trace (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->trace
			]"
		end

	c_isolanguage (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->isoLanguage
			]"
		end

	c_codepage (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->codepage
			]"
		end

	c_partnercodepage (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->partnerCodepage
			]"
		end

	c_rfcrole (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->rfcRole
			]"
		end

	c_type (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->type
			]"
		end

	c_partnertype (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->partnerType
			]"
		end

	c_rel (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->rel
			]"
		end

	c_partnerrel (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->partnerRel
			]"
		end

	c_kernelrel (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->kernelRel
			]"
		end

	c_cpicconvid (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->cpicConvId
			]"
		end

	c_progname (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->progName
			]"
		end

	c_partnerbytesperchar (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->partnerBytesPerChar
			]"
		end

	c_partnersystemcodepage (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->partnerSystemCodepage
			]"
		end

	c_partnerip (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->partnerIP
			]"
		end

	c_partneripv6 (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->partnerIPv6
			]"
		end

	c_reserved (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sapnwrfc.h>"
		alias
			"[
				((struct _RFC_ATTRIBUTES*)$an_item)->reserved
			]"
		end

end
